= sfl::segmented_vector
:last-update-label!:
:stylesheet: stylesheet.css
:toc:

== Summary

Defined in header `<sfl/segmented_vector.hpp>`.

----
namespace sfl
{

template < typename T,
           std::size_t N,
           typename Allocator = std::allocator<T> >
class segmented_vector;

}
----

`sfl::segmented_vector` is a sequence container similar to `std::vector` but
with the different storage model.
The storage of `sfl::segmented_vector` consists of a sequence of individually
allocated arrays of size `N` which are called *segments*.
The size `N` is specified at the compile time as a template parameter.
Elements of `sfl::segmented_vector` are not stored contiguously in the memory,
but they are stored contiguously within a segment.
This is very similar to the storage model of `std::deque`.
Unlike `std::deque`, `sfl::segmented_vector` allows fast insertion only at
its end.
`sfl::segmented_vector` does not have interface compatible with `std::deque`.
Interface of `sfl::segmented_vector` is compatible with `std::vector`, except
the `data()` member function, which does not exist.

The storage of `sfl::segmented_vector` is handled automatically,
being expanded and contracted as needed.
Insertion and removal at the end never invalidates pointers and references
to the rest of elements.
Iterators to elements are random access iterators and they meet the requirements of
https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator[`LegacyRandomAccessIterator`].
Indexed access to elements (`operator[]` and `at`) must perform two pointer
dereferences.

`sfl::segmented_vector` meets the requirements of
https://en.cppreference.com/w/cpp/named_req/Container[`Container`],
https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer[`AllocatorAwareContainer`],
https://en.cppreference.com/w/cpp/named_req/ReversibleContainer[`ReversibleContainer`] and
https://en.cppreference.com/w/cpp/named_req/SequenceContainer[`SequenceContainer`].

{empty} +

== Template parameters

. `typename T`
+
The type of the elements.

. `std::size_t N`
+
The size of the segments. Must be greater than zero.

. `typename Allocator`
+
Allocator used for memory allocation/deallocation and construction/destruction
of elements.
This type must meet the requirements of
https://en.cppreference.com/w/cpp/named_req/Allocator[`Allocator`].
The program is ill-formed if `Allocator::value_type` is not the same as `T`.

{empty} +

== Member types

----
using allocator_type         = Allocator;
using allocator_traits       = std::allocator_traits<Allocator>;
using value_type             = T;
using size_type              = typename allocator_traits::size_type;
using difference_type        = typename allocator_traits::difference_type;
using reference              = T&;
using const_reference        = const T&;
using pointer                = typename allocator_traits::pointer;
using const_pointer          = typename allocator_traits::const_pointer;
using iterator               = /* Random access iterator to value_type */
using const_iterator         = /* Random access iterator to const value_type */
using reverse_iterator       = std::reverse_iterator<iterator>;
using const_reverse_iterator = std::reverse_iterator<const_iterator>;
----

{empty} +

== Member functions

=== (constructor)

----
segmented_vector();
explicit segmented_vector(const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs an empty container.

*Complexity:*
Constant.
--

{empty} +

----
segmented_vector(size_type n);
explicit segmented_vector(size_type n, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with `n` default-constructed elements.

*Complexity:*
Linear in `n`.
--

{empty} +

----
segmented_vector(size_type n, const T& value);
segmented_vector(size_type n, const T& value, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with `n` copies of elements with value `value`.

*Complexity:*
Linear in `n`.
--

{empty} +

----
template <typename InputIt>
  segmented_vector(InputIt first, InputIt last);
template <typename InputIt>
  segmented_vector(InputIt first, InputIt last, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with the contents of the range `[first, last)`.

*Note:*
This overload participates in overload resolution only if `InputIt`
satisfies requirements of
https://en.cppreference.com/w/cpp/named_req/InputIterator[`LegacyInputIterator`].

*Complexity:*
Linear in `std::distance(first, last)`.
--

{empty} +

----
segmented_vector(std::initializer_list<T> ilist);
segmented_vector(std::initializer_list<T> ilist, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with the contents of the initializer list `ilist`.

*Complexity:*
Linear in `ilist.size()`.
--

{empty} +

----
segmented_vector(const segmented_vector& other);
segmented_vector(const segmented_vector& other, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with the copy of the contents of `other`.

*Complexity:*
Linear in `other.size()`.
--

{empty} +

----
segmented_vector(segmented_vector&& other);
segmented_vector(segmented_vector&& other, const Allocator& alloc);
----
{empty} ::
+
--
*Effects:*
Constructs the container with the contents of `other` using move semantics.

* First overload:
`other` is guaranteed to be empty after the move.

* Second overload:
`other` is not guaranteed to be empty after the move.
`other` is in a valid but unspecified state after the move.

*Complexity:*

* First overload: Constant.
* Second overload: Constant if `alloc == other.get_alloc()`, otherwise linear.
--

{empty} +

=== (destructor)

----
~segmented_vector();
----
{empty} ::
+
--
*Effects:*
Destructs the container. The destructors of the elements are called and
the used storage is deallocated.

*Complexity:*
Linear in `size()`.
--

{empty} +

=== assign

----
void assign(size_type n, const T& value);
----
{empty} ::
+
--
*Effects:*
Replaces the contents of the container with `n` copies of value `value`.

*Complexity:*
Linear in `n`.
--

{empty} +

----
template <typename InputIt>
void assign(InputIt first, InputIt last);
----
{empty} ::
+
--
*Effects:*
Replaces the contents of the container with the contents of the range
`[first, last)`.

*Note:*
This overload participates in overload resolution only if `InputIt`
satisfies requirements of
https://en.cppreference.com/w/cpp/named_req/InputIterator[`LegacyInputIterator`].

*Note:*
The behavior is undefined if either `first` or `last` is an iterator into `*this`.

*Complexity:*
Linear in `std::distance(first, last)`.
--

{empty} +

----
void assign(std::initializer_list<T> ilist);
----
{empty} ::
+
--
*Effects:*
Replaces the contents of the container with the contents of the initializer
list `ilist`.

*Complexity:*
Linear in `ilist.size()`.
--

{empty} +

=== operator=

----
segmented_vector& operator=(const segmented_vector& other);
----
{empty} ::
+
--
*Effects:*
Copy assignment operator. Replaces the contents with a copy of the contents
of `other`.

*Returns:*
`*this`.
--

{empty} +

----
segmented_vector& operator=(segmented_vector&& other);
----
{empty} ::
+
--
*Effects:*
Move assignment operator.
Replaces the contents with those of `other` using move semantics.
`other` is not guaranteed to be empty after the move.
`other` is in a valid but unspecified state after the move.

*Returns:*
`*this`.
--

{empty} +

----
segmented_vector& operator=(std::initializer_list<T> ilist);
----
{empty} ::
+
--
*Effects:*
Replaces the contents with those identified by initializer list `ilist`.

*Returns:*
`*this`.
--

{empty} +

=== get_allocator

----
allocator_type get_allocator() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns the allocator associated with the container.

*Complexity:*
Constant.
--

{empty} +

=== begin, cbegin

----
iterator       begin() noexcept;
const_iterator begin() const noexcept;
const_iterator cbegin() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns an iterator to the first element of the container.
If the container is empty, the returned iterator is equal to `end()`.

*Complexity:*
Constant.
--

{empty} +

=== end, cend

----
iterator       end() noexcept;
const_iterator end() const noexcept;
const_iterator cend() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns an iterator to the element following the last element of
the container. This element acts as a placeholder, attempting to
access it results in undefined behavior.

*Complexity:*
Constant.
--

{empty} +

=== rbegin, crbegin

----
reverse_iterator       rbegin() noexcept;
const_reverse_iterator rbegin() const noexcept;
const_reverse_iterator crbegin() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns a reverse iterator to the first element of the reversed container.
It corresponds to the last element of the non-reversed containers.
If the container is empty, the returned iterator is equal to `rend()`.

*Complexity:*
Constant.
--

{empty} +

=== rend, crend

----
reverse_iterator       rend() noexcept;
const_reverse_iterator rend() const noexcept;
const_reverse_iterator crend() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns a reverse iterator to the element following the last element of
the reversed container. It corresponds to the element preceding the first
element of the non-reversed container. This element acts as a placeholder,
attempting to access it results in undefined behavior.

*Complexity:*
Constant.
--

{empty} +

=== nth

----
iterator       nth(size_type pos) noexcept;
const_iterator nth(size_type pos) const noexcept;
----
{empty} ::
+
--
*Preconditions:*
`+pos <= size()+`.

*Effects:*
Returns an iterator to the element at position `pos`.
If `+pos == size()+`, the returned iterator is equal to `end()`.

*Complexity:*
Constant.
--

{empty} +

=== index_of

----
size_type index_of(const_iterator pos) const noexcept;
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Returns position of the element pointed by iterator `pos`.
If `+pos == end()+`, the returned value is equal to `size()`.

*Complexity:*
Constant.
--

{empty} +

=== empty

----
bool empty() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns `true` if the container has no elements,
i.e. whether `+begin() == end()+`.

*Complexity:*
Constant.
--

{empty} +

=== size

----
size_type size() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns the number of elements in the container,
i.e. `+std::distance(begin(), end())+`.

*Complexity:*
Constant.
--

{empty} +

=== max_size

----
size_type max_size() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns the maximum number of elements the container is able to hold,
i.e. `+std::distance(begin(), end())+` for the largest container.

*Complexity:*
Constant.
--

{empty} +

=== capacity

----
size_type capacity() const noexcept;
----
{empty} ::
+
--
*Effects:*
Returns the number of elements that the container has currently
allocated space for.

*Complexity:*
Constant.
--

{empty} +

=== reserve

----
void reserve(size_type new_cap);
----
{empty} ::
+
--
*Effects:*

. If `+new_cap > capacity()+`, the function allocates additional memory such
that capacity becomes greater than or equal to `new_cap`.
. Otherwise the function does nothing.

This function does not change size of the container.

All iterators to the elements are invalidated.
References and pointers to elements are not invalidated.
--

{empty} +

=== shrink_to_fit

----
void shrink_to_fit();
----
{empty} ::
+
--
*Effects:*
Tries to reduce memory usage by freeing unused memory.

This function does not change size of the container.

All iterators to the elements are invalidated.
References and pointers to elements are not invalidated.
--

{empty} +

=== at

----
reference       at(size_type pos);
const_reference at(size_type pos) const;
----
{empty} ::
+
--
*Effects:*
Returns a reference to the element at specified location `pos`, with bounds
checking.

*Complexity:*
Constant.

*Exceptions:*
`std::out_of_range` if `pos >= size()`.
--

{empty} +

=== operator[]

----
reference       operator[](size_type pos) noexcept;
const_reference operator[](size_type pos) const noexcept;
----
{empty} ::
+
--
*Preconditions:*
`pos < size()`.

*Effects:*
Returns a reference to the element at specified location pos. No bounds
checking is performed.

*Note:*
This operator never inserts a new element into the container.

*Complexity:*
Constant.
--

{empty} +

=== front

----
reference       front() noexcept;
const_reference front() const noexcept;
----
{empty} ::
+
--
*Preconditions:*
`!empty()`.

*Effects:*
Returns a reference to the first element in the container.

*Complexity:*
Constant.
--

{empty} +

=== back

----
reference       back() noexcept;
const_reference back() const noexcept;
----
{empty} ::
+
--
*Preconditions:*
`!empty()`.

*Effects:*
Returns a reference to the last element in the container.

*Complexity:*
Constant.
--

{empty} +

=== clear

----
void clear() noexcept;
----
{empty} ::
+
--
*Effects:*
Erases all elements from the container.
After this call, `size()` returns zero and `capacity()` remains unchanged.

*Complexity:*
Linear in `size()`.
--

{empty} +

=== emplace

----
template <typename... Args>
iterator emplace(const_iterator pos, Args&&... args);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts a new element into the container at position `pos`.
New element is constructed as `+value_type(std::forward<Args>(args)...)+`.

*Returns:*
Returns an iterator to the inserted element.

*Complexity:*
Constant plus linear in `std::distance(pos, end())`.
--

{empty} +

=== insert

----
iterator insert(const_iterator pos, const T& value);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts copy of `value` at position `pos`.

*Returns:*
Returns an iterator to the inserted element.

*Complexity:*
Constant plus linear in `std::distance(pos, end())`.
--

{empty} +

----
iterator insert(const_iterator pos, T&& value);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts `value` using move semantics at position `pos`.

*Returns:*
Returns an iterator to the inserted element.

*Complexity:*
Constant plus linear in `std::distance(pos, end())`.
--

{empty} +

----
iterator insert(const_iterator pos, size_type n, const T& value);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts `n` copies of `value` before position `pos`.

*Returns:*
Iterator to the first element inserted, or `pos` if `n == 0`.

*Complexity:*
Linear in `n` plus linear in `std::distance(pos, end())`.
--

{empty} +

----
template <typename InputIt>
iterator insert(const_iterator pos, InputIt first, InputIt last);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts elements from the range `[first, last)` before position `pos`.

*Note:*
This overload participates in overload resolution only if `InputIt`
satisfies requirements of
https://en.cppreference.com/w/cpp/named_req/InputIterator[`LegacyInputIterator`].

*Note:*
The behavior is undefined if either `first` or `last` is an iterator into `*this`.

*Returns:*
Iterator to the first element inserted, or `pos` if `first == last`.

*Complexity:*
Linear in `std::distance(first, last)` plus linear in `std::distance(pos, end())`.
--

{empty} +

----
iterator insert(const_iterator pos, std::initializer_list<T> ilist);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos <= cend()+`.

*Effects:*
Inserts elements from initializer list `ilist` before position `pos`.

*Returns:*
Iterator to the first element inserted, or `pos` if `ilist` is empty.

*Complexity:*
Linear in `ilist.size()` plus linear in `std::distance(pos, end())`.
--

{empty} +

=== emplace_back

----
template <typename... Args>
reference emplace_back(Args&&... args);
----
{empty} ::
+
--
*Effects:*
Inserts a new element at the end of container. New element is constructed as
`+value_type(std::forward<Args>(args)...)+`.

*Returns:*
Returns a reference to the inserted element.

*Complexity:*
Constant.
--

{empty} +

=== push_back

----
void push_back(const T& value);
----
{empty} ::
+
--
*Effects:*
Inserts copy of `value` at the end of container.

*Complexity:*
Constant.
--

{empty} +

----
void push_back(T&& value);
----
{empty} ::
+
--
*Effects:*
Inserts `value` using move semantics at the end of container.

*Complexity:*
Constant.
--

{empty} +

=== pop_back

----
void pop_back();
----
{empty} ::
+
--
*Preconditions:*
`!empty()`.

*Effects:*
Removes the last element of the container.

*Complexity:*
Constant.
--

{empty} +

=== erase

----
iterator erase(const_iterator pos);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= pos && pos < cend()+`.

*Effects:*
Removes the element pointed by iterator `pos`.

*Returns:*
Iterator following the last removed element.
--

{empty} +

----
iterator erase(const_iterator first, const_iterator last);
----
{empty} ::
+
--
*Preconditions:*
`+cbegin() <= first && first <= last && last <= cend()+`.

*Effects:*
Removes the elements in the range `[first, last)`.

*Returns:*
Iterator following the last removed element.
--

{empty} +

=== resize

----
void resize(size_type n);
----
{empty} ::
+
--
*Effects:*
Resizes the container to contain `n` elements.

. If the `size() > n`, the last `size() - n` elements are removed.
. If the `size() < n`, additional default-constructed elements are inserted at
the end of container.
--

{empty} +

----
void resize(size_type n, const T& value);
----
{empty} ::
+
--
*Effects:*
Resizes the container to contain `n` elements.

. If the `size() > n`, the last `size() - n` elements are removed.
. If the `size() < n`, additional copies of `value` are inserted at
the end of container.
--

{empty} +

=== swap

----
void swap(segmented_vector& other) noexcept;
----
{empty} ::
+
--
*Preconditions:*
`+allocator_traits::propagate_on_container_swap::value || get_allocator() == other.get_allocator()+`.

*Effects:*
Exchanges the contents of the container with those of `other`.

*Complexity:*
Constant.
--

{empty} +

== Non-member functions

=== operator==

----
template <typename T, std::size_t N, typename A>
bool operator==
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` and `y` are equal, `false` otherwise.

The contents of the `x` and `y` are equal if they have the same number of
elements and each element in `x` compares equal with the element in `y` at
the same position

*Complexity:*
Constant if `x` and `y` are of different size, otherwise linear in the size
of the container.
--

{empty} +

=== operator!=

----
template <typename T, std::size_t N, typename A>
bool operator!=
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` and `y` are not equal, `false` otherwise.

*Complexity:*
Constant if `x` and `y` are of different size, otherwise linear in the size
of the container.
--

{empty} +

=== operator<

----
template <typename T, std::size_t N, typename A>
bool operator<
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` are lexicographically less than
the contents of `y`, `false` otherwise.

*Note:*
The comparison is performed by `std::lexicographical_compare`.

*Complexity:*
Linear in the size of the container.
--

{empty} +

=== operator>

----
template <typename T, std::size_t N, typename A>
bool operator>
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` are lexicographically greater than
the contents of `y`, `false` otherwise.

*Note:*
The comparison is performed by `std::lexicographical_compare`.

*Complexity:*
Linear in the size of the container.
--

{empty} +

=== operator\<=

----
template <typename T, std::size_t N, typename A>
bool operator<=
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` are lexicographically less than
or equal to the contents of `y`, `false` otherwise.

*Note:*
The comparison is performed by `std::lexicographical_compare`.

*Complexity:*
Linear in the size of the container.
--

{empty} +

=== operator>=

----
template <typename T, std::size_t N, typename A>
bool operator>=
(
    const segmented_vector<T, N, A>& x,
    const segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Returns `true` if the contents of the `x` are lexicographically greater than
or equal to the contents of `y`, `false` otherwise.

*Note:*
The comparison is performed by `std::lexicographical_compare`.

*Complexity:*
Linear in the size of the container.
--

{empty} +

=== swap

----
template <typename T, std::size_t N, typename A>
void swap
(
    segmented_vector<T, N, A>& x,
    segmented_vector<T, N, A>& y
);
----
{empty} ::
+
--
*Effects:*
Swaps the contents of `x` and `y`. Calls `x.swap(y)`.
--

{empty} +

=== erase

----
template <typename T, std::size_t N, typename A, typename U>
typename segmented_vector<T, N, A>::size_type
    erase(segmented_vector<T, N, A>& c, const U& value);
----
{empty} ::
+
--
*Effects:*
Erases all elements that compare equal to `value` from the container.

*Returns:*
The number of erased elements.

*Complexity:*
Linear.
--

{empty} +

=== erase_if

----
template <typename T, std::size_t N, typename A, typename Predicate>
typename segmented_vector<T, N, A>::size_type
    erase_if(segmented_vector<T, N, A>& c, Predicate pred);
----
{empty} ::
+
--
*Effects:*
Erases all elements that satisfy the predicate `pred` from the container.

Parameter `pred` is unary predicate which returns `true` if the element should
be removed.

*Returns:*
The number of erased elements.

*Complexity:*
Linear.
--

{empty} +

End of document.
